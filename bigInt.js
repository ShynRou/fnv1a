'use strict';

const OFFSET_BASIS = {
  32: 2166136261n,
  64: 14695981039346656037n,
  128: 144066263297769815596495629667062367629n,
  256: 100029257958052580907070968620625704837092796014241193945225284501741471925557n,
  512: 9659303129496669498009435400716310466090418745672637896108374329434462657994582932197716438449813051892206539805784495328239340083876191928701583869517785n,
  1024: 14197795064947621068722070641403218320880622795441933960878474914617582723252296732303717722150864096521202355549365628174669108571814760471015076148029755969804077320157692458563003215304957150157403644460363550505412711285966361610267868082893823963790439336411086884584107735010676915n,
};

const FNV_PRIMES = {
  32: 16777619n,
  64: 1099511628211n,
  128: 309485009821345068724781371n,
  256: 374144419156711147060143317175368453031918731002211n,
  512: 35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852759n,
  1024: 5016456510113118655434598811035278955030765345404790744303017523831112055108147451509157692220295382716162651878526895249385292291816524375083746691371804094271873160484737966720260389217684476157468082573n
};


/**
	* 64, 128, 256, 512, 1024 - bit hash functions.
 * @param {string} - The input string
 * @param {options} - Object specifying 'bits', etc.
	* @returns `BigInt hash.`
 */
function bigInt(string, options = { bits: 64 }) {
  const bits = options && options.bits || 64;
  if (!OFFSET_BASIS[bits]) {
    throw RangeError('fnv1a.bigInt only supports ' + Object.keys(OFFSET_BASIS).join(', '))
  }

  const fnvPrime = FNV_PRIMES[bits];
  let hash = OFFSET_BASIS[bits];

  for (let i = 0; i < string.length; i++) {
    hash ^= BigInt(string.charCodeAt(i));
    // prevent the BigInt from exceeding the defined bit-space
    hash = BigInt.asUintN(bits, hash * fnvPrime);
  }

  return hash;
};

module.exports = bigInt;



